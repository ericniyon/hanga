/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/iworker.js":
/*!*********************************!*\
  !*** ./resources/js/iworker.js ***!
  \*********************************/
/***/ (() => {

eval("var loadDistricts = function loadDistricts(provinceId, selectedValue) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $('#district_id');\n  if (!provinceId) return;\n  element.empty();\n  element.append(\"<option value=''>CHOOSE</option>\");\n  $.getJSON('/districts/' + provinceId).done(function (response) {\n    response.forEach(function (item) {\n      element.append(\"<option value='\" + item.id + \"' >\" + item.name + \"</option>\");\n    });\n    element.val(selectedValue);\n  });\n};\n\nvar loadSector = function loadSector(districtId, selectedValue) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $('#sector_id');\n  if (!districtId) return;\n  $.getJSON('/sectors/' + districtId, function (data) {\n    element.empty();\n    element.append('<option value=\"\">CHOOSE</option>');\n    $.each(data, function (index, value) {\n      element.append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n    });\n    element.val(selectedValue);\n  });\n};\n\nvar loadCells = function loadCells(districtId, selectedValue) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $('#cell_id');\n  if (!districtId) return;\n  $.getJSON('/cells/' + districtId, function (data) {\n    element.empty();\n    element.append('<option value=\"\">CHOOSE</option>');\n    $.each(data, function (index, value) {\n      element.append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n    });\n    element.val(selectedValue);\n  });\n};\n\nvar loadVillages = function loadVillages(districtId, selectedValue) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $('#village_id');\n  if (!districtId) return;\n  $.getJSON('/villages/' + districtId, function (data) {\n    element.empty();\n    element.append('<option value=\"\">CHOOSE</option>');\n    $.each(data, function (index, value) {\n      element.append('<option value=\"' + value.id + '\">' + value.name + '</option>');\n    });\n    element.val(selectedValue);\n  });\n};\n\nwindow.getFieldOfStudies = function (level) {\n  var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $('#field_of_study_id');\n  element.empty();\n  element.append('<option value=\"\"></option>');\n  $.ajax({\n    url: '/field-of-study/' + level + '/get',\n    method: 'GET',\n    success: function success(response) {\n      response.forEach(function (item, index) {\n        element.append('<option value=\"' + item.id + '\">' + item.name + '</option>');\n      });\n      element.val(selected);\n    }\n  });\n};\n\n$(function () {\n  var makeAjaxRequest = function makeAjaxRequest(form, formData) {\n    var btn = form.find(':submit');\n    btn.addClass('spinner spinner-right spinner-white').prop('disabled', true);\n    $.ajax({\n      url: form.attr('action'),\n      method: form.attr('method'),\n      data: formData,\n      dataType: 'json',\n      cache: false,\n      contentType: false,\n      processData: false,\n      completed: function completed(response) {},\n      success: function success(response) {\n        location.reload();\n      },\n      error: function error(response) {\n        btn.removeClass('spinner spinner-right spinner-white').prop('disabled', false);\n      }\n    });\n  };\n\n  var trainings = function trainings() {\n    $('#addTrainingButton').on('click', function () {\n      $('#trainingId').val(0);\n      $('#addTrainingModal').modal();\n    });\n    $('.js-edit-training').on('click', function () {\n      $('#trainingId').val($(this).data('id'));\n      $('#training_name').val($(this).data('name'));\n      $('#issuer').val($(this).data('issuer'));\n      $('#issuance_date').val($(this).data('issuance_date'));\n      $('#addTrainingModal').modal();\n    });\n    $('#formSaveTraining').on('submit', function (e) {\n      e.preventDefault();\n      var form = $(this);\n      var btn = form.find(':submit');\n      if (!form.valid()) return;\n      btn.addClass('spinner spinner-right spinner-white').prop('disabled', true);\n      var formData = new FormData(this);\n      formData.append('iworker_registration_id', $('#id').val());\n      $.ajax({\n        url: form.attr('action'),\n        method: form.attr('method'),\n        data: formData,\n        dataType: 'json',\n        cache: false,\n        contentType: false,\n        processData: false,\n        completed: function completed(response) {},\n        success: function success(response) {\n          location.reload();\n        },\n        error: function error(response) {\n          btn.removeClass('spinner spinner-right spinner-white').prop('disabled', false);\n        }\n      });\n    });\n  };\n\n  var experience = function experience() {\n    $('#addExperienceButton').on('click', function () {\n      $('#experienceId').val(0);\n      $('#addExperienceModal').modal();\n    });\n    $('.js-edit-experience').on('click', function () {\n      $('#experienceId').val($(this).data('id'));\n      $('#service_offered').val($(this).data('service_offered'));\n      $('#experience_client').val($(this).data('client'));\n      $('#experience_description').val($(this).data('description'));\n      $('#year_of_completion').val($(this).data('year_of_completion'));\n      $('#addExperienceModal').modal();\n    });\n    $('#formSaveExperience').on('submit', function (e) {\n      e.preventDefault();\n      var form = $(this);\n      var btn = form.find(':submit');\n      if (!form.valid()) return;\n      btn.addClass('spinner spinner-right spinner-white').prop('disabled', true);\n      var formData = new FormData(this);\n      formData.append('iworker_registration_id', $('#id').val());\n      $.ajax({\n        url: form.attr('action'),\n        method: form.attr('method'),\n        data: formData,\n        dataType: 'json',\n        cache: false,\n        contentType: false,\n        processData: false,\n        completed: function completed(response) {},\n        success: function success(response) {\n          location.reload();\n        },\n        error: function error(response) {\n          btn.removeClass('spinner spinner-right spinner-white').prop('disabled', false);\n        }\n      });\n    });\n  };\n\n  var affiliation = function affiliation() {\n    $('#employer_id').select2({\n      placeholder: \"Select your employer\",\n      minimumInputLength: 2,\n      minimumResultsForSearch: 20,\n      ajax: {\n        url: '/search-employers',\n        delay: 250,\n        dataType: \"json\",\n        type: \"GET\",\n        data: function data(params) {\n          return {\n            search: params.term\n          };\n        },\n        processResults: function processResults(data) {\n          return {\n            results: $.map(data, function (item) {\n              return {\n                text: item.name,\n                id: item.id\n              };\n            })\n          };\n        }\n      }\n    });\n    $('#addAffiliationButton').on('click', function () {\n      $('#affiliationId').val(0);\n      $('#addAffiliationModal').modal();\n    });\n    $('.js-edit-affiliation').on('click', function () {\n      $('#affiliationId').val($(this).data('id'));\n      $('#employer_id').val($(this).data('employer_id'));\n      $('#position').val($(this).data('position'));\n      $('#description').val($(this).data('description'));\n      $('#addAffiliationModal').modal();\n    });\n    $('#formSaveAffiliation').on('submit', function (e) {\n      e.preventDefault();\n      var form = $(this);\n      var btn = form.find(':submit');\n      if (!form.valid()) return;\n      btn.addClass('spinner spinner-right spinner-white').prop('disabled', true);\n      var formData = new FormData(this); // formData.append('iworker_registration_id', $('#id').val());\n\n      $.ajax({\n        url: form.attr('action'),\n        method: form.attr('method'),\n        data: formData,\n        dataType: 'json',\n        cache: false,\n        contentType: false,\n        processData: false,\n        completed: function completed(response) {},\n        success: function success(response) {\n          location.reload();\n        },\n        error: function error(response) {\n          showErrors(response);\n          btn.removeClass('spinner spinner-right spinner-white').prop('disabled', false);\n        }\n      });\n    });\n  };\n\n  var branch = function branch() {\n    $('#addBranchButton').on('click', function () {\n      $('#branchId').val(0);\n      $('#addBranchModal').modal();\n    });\n    $('.js-edit-branch').on('click', function () {\n      var $branchProvinceId = $('#branch_province_id');\n      var $branchDistrictId = $('#branch_district_id');\n      var districtId = $(this).data('district');\n      var $branchSectorId = $('#branch_sector_id');\n      var provinceId = $(this).data('province');\n      var $branchCellId = $('#branch_cell_id');\n      var $branchVillageId = $('#branch_village_id');\n      var sectorId = $(this).data('sector');\n      var cellId = $(this).data('cell');\n      var villageId = $(this).data('village');\n      $('#branchId').val($(this).data('id'));\n      $('#branch_name').val($(this).data('name'));\n      $branchProvinceId.val(provinceId);\n      $branchDistrictId.val(districtId);\n      $branchSectorId.val(sectorId);\n      $branchCellId.val(cellId);\n      $branchVillageId.val(villageId);\n      loadDistricts(provinceId, districtId, $branchDistrictId);\n      loadSector(districtId, sectorId, $branchSectorId);\n      loadCells(sectorId, cellId, $branchCellId);\n      loadVillages(cellId, villageId, $branchVillageId);\n      $('#addBranchModal').modal();\n    });\n    $('#formSaveBranch').on('submit', function (e) {\n      e.preventDefault();\n      var form = $(this);\n      var btn = form.find(':submit');\n      if (!form.valid()) return;\n      btn.addClass('spinner spinner-right spinner-white').prop('disabled', true);\n      var formData = new FormData(this);\n      formData.append('application_id', $('#application_id').val());\n      $.ajax({\n        url: form.attr('action'),\n        method: form.attr('method'),\n        data: formData,\n        dataType: 'json',\n        cache: false,\n        contentType: false,\n        processData: false,\n        completed: function completed(response) {},\n        success: function success(response) {\n          location.reload();\n        },\n        error: function error(response) {\n          btn.removeClass('spinner spinner-right spinner-white').prop('disabled', false);\n        }\n      });\n    });\n    $('#branch_province_id').on('change', function () {\n      loadDistricts($(this).val(), 0, $('#branch_district_id'));\n    });\n    $('#branch_district_id').on('change', function () {\n      loadSector($(this).val(), 0, $('#branch_sector_id'));\n    });\n    $('#branch_sector_id').on('change', function () {\n      loadCells($(this).val(), 0, $('#branch_cell_id'));\n    });\n    $('#branch_cell_id').on('change', function () {\n      loadVillages($(this).val(), 0, $('#branch_village_id'));\n    });\n  };\n\n  var employee = function employee() {\n    $('#addEmployeeButton').on('click', function () {\n      $('#employeeId').val(0);\n      $('#addEmployeeModal').modal();\n    });\n    $('.js-edit-employee').on('click', function () {\n      $('#employeeId').val($(this).data('id'));\n      $('#employee_name').val($(this).data('name'));\n      $('#employee_position').val($(this).data('position'));\n      $('#employee_recruitment_date').val($(this).data('recruitment_date'));\n      var levelOfStudy = $(this).data('level_of_study_id');\n      $('#employee_level_of_study_id').val(levelOfStudy);\n      getFieldOfStudies(levelOfStudy, $(this).data('field_of_study'), $('#employee_field_of_study'));\n      $('#addEmployeeModal').modal();\n    });\n    $('#formSaveEmployee').on('submit', function (e) {\n      e.preventDefault();\n      var form = $(this);\n      if (!form.valid()) return;\n      var formData = new FormData(this);\n      formData.append('iworker_registration_id', $('#id').val());\n      makeAjaxRequest(form, formData);\n    });\n  };\n\n  var $iworkerType = $('#iworker_type');\n  $iworkerType.on('change', function () {\n    if ($(this).val() === \"Individual\") {\n      $('.individual').removeClass('hide');\n    } else {\n      $('.individual').addClass('hide');\n    }\n\n    if ($(this).val() === \"Company\") {\n      $('.company').removeClass('hide');\n    } else {\n      $('.company').addClass('hide');\n    }\n  });\n  $iworkerType.trigger('change');\n  trainings();\n  experience();\n  branch();\n  employee();\n  affiliation();\n  $('#level_of_study_id').on('change', function () {\n    if (!$(this).val()) return;\n    getFieldOfStudies($(this).val());\n  });\n  $('#employee_level_of_study_id').on('change', function () {\n    if (!$(this).val()) return;\n    getFieldOfStudies($(this).val(), '', $('#employee_field_of_study'));\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/iworker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/iworker.js"]();
/******/ 	
/******/ })()
;